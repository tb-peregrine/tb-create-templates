
DESCRIPTION >
    Analyzes user progression through defined funnels with conversion rates between steps

NODE funnel_analysis_node
SQL >
    %
    WITH funnel_events AS (
        SELECT
            e.user_id,
            e.session_id,
            f.funnel_id,
            f.funnel_name,
            f.step_number,
            f.step_name,
            min(e.timestamp) as step_timestamp
        FROM events e
        JOIN funnel_steps f ON e.event_name = f.event_name
        WHERE 1=1
        {% if defined(funnel_id) %}
            AND f.funnel_id = {{String(funnel_id, '')}}
        {% end %}
        {% if defined(start_date) %}
            AND e.timestamp >= {{DateTime(start_date, '2023-01-01 00:00:00')}}
        {% end %}
        {% if defined(end_date) %}
            AND e.timestamp <= {{DateTime(end_date, '2023-12-31 23:59:59')}}
        {% end %}
        GROUP BY e.user_id, e.session_id, f.funnel_id, f.funnel_name, f.step_number, f.step_name
    ),
    step_counts AS (
        SELECT
            funnel_id,
            funnel_name,
            step_number,
            step_name,
            count(distinct user_id) as user_count,
            count(distinct session_id) as session_count
        FROM funnel_events
        GROUP BY funnel_id, funnel_name, step_number, step_name
        ORDER BY funnel_id, step_number
    ),
    first_step AS (
        SELECT
            funnel_id,
            min(user_count) as initial_users,
            min(session_count) as initial_sessions
        FROM step_counts
        WHERE step_number = 1
        GROUP BY funnel_id
    )
    SELECT
        s.funnel_id,
        s.funnel_name,
        s.step_number,
        s.step_name,
        s.user_count,
        s.session_count,
        f.initial_users,
        f.initial_sessions,
        round(s.user_count / f.initial_users * 100, 2) as user_conversion_rate,
        round(s.session_count / f.initial_sessions * 100, 2) as session_conversion_rate,
        s.user_count - lag(s.user_count, 1, s.user_count) OVER (PARTITION BY s.funnel_id ORDER BY s.step_number) as user_drop_off,
        round((s.user_count - lag(s.user_count, 1, s.user_count) OVER (PARTITION BY s.funnel_id ORDER BY s.step_number)) / lag(s.user_count, 1, s.user_count) OVER (PARTITION BY s.funnel_id ORDER BY s.step_number) * 100, 2) as step_drop_off_rate
    FROM step_counts s
    JOIN first_step f ON s.funnel_id = f.funnel_id
    ORDER BY s.funnel_id, s.step_number

TYPE endpoint
        