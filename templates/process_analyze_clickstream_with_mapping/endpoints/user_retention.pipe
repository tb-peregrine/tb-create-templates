
DESCRIPTION >
    Analyze user retention over time periods

NODE user_retention_node
SQL >
    %
    WITH 
    first_visits AS (
        SELECT
            user_id,
            toStartOfDay(min(timestamp)) as first_visit_date
        FROM clickstream_events
        WHERE 1=1
        {% if defined(start_date) %}
            AND timestamp >= {{DateTime(start_date, '2023-01-01 00:00:00')}}
        {% end %}
        {% if defined(end_date) %}
            AND timestamp <= {{DateTime(end_date, '2023-12-31 23:59:59')}}
        {% end %}
        GROUP BY user_id
    ),
    
    cohort_size AS (
        SELECT
            first_visit_date,
            count(DISTINCT user_id) as users
        FROM first_visits
        GROUP BY first_visit_date
    ),
    
    retention AS (
        SELECT
            f.first_visit_date,
            toStartOfDay(e.timestamp) as activity_date,
            count(DISTINCT e.user_id) as active_users
        FROM first_visits f
        JOIN clickstream_events e ON f.user_id = e.user_id
        WHERE toStartOfDay(e.timestamp) >= f.first_visit_date
        {% if defined(start_date) %}
            AND e.timestamp >= {{DateTime(start_date, '2023-01-01 00:00:00')}}
        {% end %}
        {% if defined(end_date) %}
            AND e.timestamp <= {{DateTime(end_date, '2023-12-31 23:59:59')}}
        {% end %}
        GROUP BY f.first_visit_date, activity_date
    )
    
    SELECT
        r.first_visit_date as cohort_date,
        c.users as cohort_size,
        r.activity_date,
        r.active_users,
        dateDiff('day', r.first_visit_date, r.activity_date) as days_since_first_visit,
        round(r.active_users / c.users * 100, 1) as retention_rate
    FROM retention r
    JOIN cohort_size c ON r.first_visit_date = c.first_visit_date
    ORDER BY r.first_visit_date, days_since_first_visit

TYPE endpoint
        