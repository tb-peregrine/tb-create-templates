DESCRIPTION >
    Analyzes user retention over time periods for different segments

NODE user_retention_analysis_node
SQL >
    %
    WITH 
        first_events AS (
            SELECT
                user_id,
                segment_name,
                min(timestamp) as first_event_date
            FROM user_events ue
            JOIN user_segments us ON ue.user_id = us.user_id
            WHERE us.active = 1
            {% if defined(segment_id) %}
                AND us.segment_id = {{String(segment_id, '')}}
            {% end %}
            {% if defined(start_date) %}
                AND ue.timestamp >= {{DateTime(start_date, '2023-01-01 00:00:00')}}
            {% end %}
            {% if defined(end_date) %}
                AND ue.timestamp <= {{DateTime(end_date, '2023-12-31 23:59:59')}}
            {% end %}
            GROUP BY user_id, segment_name
        ),
        retention_data AS (
            SELECT
                fe.segment_name,
                toStartOfWeek(fe.first_event_date) as cohort_week,
                toStartOfWeek(ue.timestamp) as activity_week,
                dateDiff('week', toStartOfWeek(fe.first_event_date), toStartOfWeek(ue.timestamp)) as week_number,
                count(DISTINCT fe.user_id) as user_count
            FROM first_events fe
            JOIN user_events ue ON fe.user_id = ue.user_id
            WHERE ue.timestamp >= fe.first_event_date
            {% if defined(max_weeks) %}
                AND dateDiff('week', toStartOfWeek(fe.first_event_date), toStartOfWeek(ue.timestamp)) <= {{Int32(max_weeks, 8)}}
            {% else %}
                AND dateDiff('week', toStartOfWeek(fe.first_event_date), toStartOfWeek(ue.timestamp)) <= 8
            {% end %}
            GROUP BY fe.segment_name, cohort_week, activity_week, week_number
        )
    SELECT
        segment_name,
        cohort_week,
        week_number,
        user_count,
        first_value(user_count) OVER (PARTITION BY segment_name, cohort_week ORDER BY week_number) as initial_users,
        round(user_count * 100.0 / first_value(user_count) OVER (PARTITION BY segment_name, cohort_week ORDER BY week_number), 2) as retention_rate
    FROM retention_data
    ORDER BY segment_name, cohort_week, week_number

TYPE endpoint